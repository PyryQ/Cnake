@page
@model IndexModel
@{
    ViewData["Title"] = "C# Snake game";
}

<!DOCTYPE html>
<html>
<head>
    <style>
        #game-board {
            width: 500px;
            height: 500px;
            border: 1px solid black;
            position: relative;
        }

        .snake-block {
            width: 10px;
            height: 10px;
            position: absolute;
            background-color: green;
        }
    </style>
</head>
<body>
    <p>Difficulty slider</p>
    <input type="range" min="1" max="100" value="50" class="slider" id="myRange">
    <p>Value: <span id="value"></span></p>
    <b></b>

    <p id="score">Score: <span id="scoreValue">0</span></p>
    <div id="game-board"></div>
    <button id="reset-button">Reset</button>
    <script>
        const gameBoard = document.getElementById("game-board");

        const resetButton = document.getElementById("reset-button");

        let snake = [{ x: 250, y: 250 }];

        let apple = { x: 0, y: 0 };
        let appleDrawn = false;
        let score = 0;

        document.getElementById("scoreValue").innerHTML = score;

        // Initialize the direction of the snake
        let direction = "right";

        const slider = document.getElementById("myRange");
        const valueDisplay = document.getElementById("value");

        valueDisplay.innerHTML = slider.value;

        slider.oninput = function() {
            valueDisplay.innerHTML = this.value;
        }

        // Draw a square representing the apple
        function drawApple(x, y) {
          let square = document.createElement("div");
              square.style.left = `${x}px`;
              square.style.top = `${y}px`;
              square.style.width = "10px";
              square.style.height = "10px";
              square.style.position = "absolute";
              square.style.backgroundColor = "red";
              gameBoard.appendChild(square);
        }

        // Draw the snake on the game board
        function drawSnake() {
            // Remove all existing blocks
            while (gameBoard.firstChild) {
                gameBoard.removeChild(gameBoard.firstChild);
            }

            // Draw the snake
            for (let i = 0; i < snake.length; i++) {
                let block = document.createElement("div");
                block.classList.add("snake-block");
                block.style.left = snake[i].x + "px";
                block.style.top = snake[i].y + "px";
                gameBoard.appendChild(block);
            }

            drawApple(apple.x, apple.y);
        }

        function spawnApple() {
            // Generate a random X and Y coordinate within the game board
            apple.x = Math.floor(Math.random() * 50) * 10;
            apple.y = Math.floor(Math.random() * 50) * 10;

            // Check if the apple was generated on top of the snake
            while (snake.some(part => part.x === apple.x && part.y === apple.y)) {
                apple.x = Math.floor(Math.random() * 50) * 10;
                apple.y = Math.floor(Math.random() * 50) * 10;
            }

            if (!appleDrawn) {
                appleDrawn = false;
                drawApple(apple.x, apple.y);
            }
        }

        // Move the snake in the current direction
        function moveSnake() {
            let head = { x: snake[0].x, y: snake[0].y };
            switch (direction) {
                case "right":
                    head.x += 10;
                    break;
                case "left":
                    head.x -= 10;
                    break;
                case "up":
                    head.y -= 10;
                    break;
                case "down":
                    head.y += 10;
                    break;
            }

            snakeEatsApple(head, apple);

            // Check if the head is touching the snake or the outer edges of the square
            for (let i = 0; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    alert("You lost!");
                    clearInterval(gameLoop);
                    return;
                }
            }
            if (head.x < 0 || head.x > 490 || head.y < 0 || head.y > 490) {
                alert("You lost!");
                clearInterval(gameLoop);
                return;
            }

            snake.unshift(head);
            snake.pop();
            drawSnake();
        }

        function snakeEatsApple(head, apple){
            if ((head.x == apple.x) && (head.y == apple.y)){
                score += 10;

                document.getElementById("scoreValue").innerHTML = score;

                spawnApple();
            }
        }

        // Start the game
        function startGame() {
            gameLoop = setInterval(moveSnake, slider.value *2 )
            spawnApple();
        }

        // Reset the game
        function resetGame() {
            clearInterval(gameLoop);
            snake = [{ x: 250, y: 250 }];
            direction = "right";
            appleDrawn = false;
            drawSnake();
            startGame();
        }

        // Handle the reset button click event
        resetButton.addEventListener("click", resetGame);

        // Handle the arrow key press events
        document.onkeydown = function (event) {
            switch (event.keyCode) {
                case 37:
                    if (direction !== "right") direction = "left";
                    break;
                case 38:
                    if (direction !== "down") direction = "up";
                    break;
                case 39:
                    if (direction !== "left") direction = "right";
                    break;
                case 40:
                    if (direction !== "up") direction = "down";
                    break;
            }
        };

        startGame();
    </script>
</body>
</html>

